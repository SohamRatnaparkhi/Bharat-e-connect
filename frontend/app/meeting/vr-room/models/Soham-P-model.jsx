/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/soham-model.glb
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useFBX, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useVRStore } from "@/app/store/VRStore";
import * as THREE from "three";

export function SohamPModel(props) {
  const group = useRef();

  const { isHeadFollow } = useVRStore();
  console.log(isHeadFollow);

  const { nodes, materials } = useGLTF("/models/soham-model.glb");

  const { animations: sittingAnim } = useFBX(
    "/animations/sitting-Idle.fbx"
  );
  const { animations: sitting_clapAnim } = useFBX(
    "/animations/sitting-clap.fbx"
  );
  const { animations: sitting_clap1Anim } = useFBX(
    "/animations/sitting-clap_1.fbx"
  );
  const { animations: sitting_talkingAnim } = useFBX(
    "/animations/sitting-talking.fbx"
  );
  const { animations: sitting_laughingAnim } = useFBX(
    "/animations/Sitting-Laughing.fbx"
  );
  const { animations: sitting_maleAnim } = useFBX(
    "/animations/male-sitting Pose.fbx"
  );

  sittingAnim[0].name = "sitting-anim";
  sitting_clapAnim[0].name = "sitting-clap-anim";
  sitting_clap1Anim[0].name = "sitting-clap1-anim";
  sitting_talkingAnim[0].name = "sitting-talking-anim";
  sitting_laughingAnim[0].name = "sitting-laughing-anim";
  sitting_maleAnim[0].name = "sitting-male-anim";

  const { actions } = useAnimations(
    [
      sittingAnim[0],
      sitting_clapAnim[0],
      sitting_clap1Anim[0],
      sitting_talkingAnim[0],
      sitting_laughingAnim[0],
      sitting_maleAnim[0],
    ],
    group
  );

  // const [animation, setAnimation] = React.useState("sitting-clap-anim");
    const { myAnimation } = useVRStore();

  useEffect(() => {
    actions[myAnimation].reset().fadeIn(0.5).play();

    return () => actions[myAnimation].fadeIn(0.5);
  }, [actions, myAnimation]);

  useFrame((state, delta) => {
    const target = new THREE.Vector3(0, state.mouse.y, state.mouse.x);
    if (isHeadFollow) {
      group.current.getObjectByName("Neck").lookAt(target);
    }
  });

  return (
    <group
      {...props}
      ref={group}
      dispose={null}
      rotation={[Math.PI / 2, Math.PI, Math.PI / 2]}
    >
      {/* <axesHelper /> */}
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Outfit_Top.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Outfit_Top.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Outfit_Bottom.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Outfit_Bottom.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        morphTargetDictionary={
          nodes.Wolf3D_Outfit_Footwear.morphTargetDictionary
        }
        morphTargetInfluences={
          nodes.Wolf3D_Outfit_Footwear.morphTargetInfluences
        }
      />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Body.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Body.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/soham-model.glb");
