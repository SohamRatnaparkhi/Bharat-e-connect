/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/models/soham-model.glb
*/

import React, { useRef, useEffect, use, useMemo } from "react";
import { useGLTF, useFBX, useAnimations } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import { useVRStore } from "@/app/store/VRStore";
import * as THREE from "three";
import { SkeletonUtils} from 'three-stdlib';

export function CharacterModel(props) {
  const group = useRef();
  const avatar = useRef();

  const { scene } = useGLTF(props.modelLink);
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(clone);

  const { isHeadFollow } = useVRStore();
  console.log(isHeadFollow);


  const { animations: sittingAnim } = useFBX(
    "/animations/sitting-Idle.fbx"
  );
  const { animations: sitting_clapAnim } = useFBX(
    "/animations/sitting-clap.fbx"
  );
  const { animations: sitting_clap1Anim } = useFBX(
    "/animations/sitting-clap_1.fbx"
  );
  const { animations: sitting_talkingAnim } = useFBX(
    "/animations/sitting-talking.fbx"
  );
  const { animations: sitting_laughingAnim } = useFBX(
    "/animations/Sitting-Laughing.fbx"
  );
  const { animations: sitting_maleAnim } = useFBX(
    "/animations/male-sitting Pose.fbx"
  );

  sittingAnim[0].name = "sitting-anim";
  sitting_clapAnim[0].name = "sitting-clap-anim";
  sitting_clap1Anim[0].name = "sitting-clap1-anim";
  sitting_talkingAnim[0].name = "sitting-talking-anim";
  sitting_laughingAnim[0].name = "sitting-laughing-anim";
  sitting_maleAnim[0].name = "sitting-male-anim";

  const { actions } = useAnimations(
    [
      sittingAnim[0],
      sitting_clapAnim[0],
      sitting_clap1Anim[0],
      sitting_talkingAnim[0],
      sitting_laughingAnim[0],
      sitting_maleAnim[0],
    ],
    group
  );

  // const [animation, setAnimation] = React.useState("sitting-clap-anim");
    const { myAnimation } = useVRStore();

  useEffect(() => {
    if(myAnimation)
    actions[myAnimation].reset().fadeIn(0.5).play();
    else 
    actions["sitting-anim"].reset().fadeIn(0.5).play();

    return () => actions[myAnimation].fadeIn(0.5);
  }, [actions, myAnimation]);

  useFrame((state, delta) => {
    const target = new THREE.Vector3(0, state.mouse.y, state.mouse.x);
    if (isHeadFollow) {
      group.current.getObjectByName("Neck").lookAt(target);
    }
  });


  const characterRotation = [0, Math.PI/2, 0];


  if(props.orientation === 0){
    characterRotation[1] = Math.PI;
  } else if(props.orientation % 2 === 1){
    characterRotation[1] = -Math.PI/2;
  } else if(props.orientation % 2 === 10){
    characterRotation[1] = 0;
  } 



  return (
    <group
      {...props}
      ref={group}
      dispose={null}
      rotation={characterRotation}
    >
        {/* <axesHelper args={[5]} /> */}
      <primitive object={clone} ref={avatar} />
    </group>
  );
}

useGLTF.preload("https://models.readyplayer.me/654a2335d09f0280f032b08c.glb");
useFBX.preload("/animations/sitting-Idle.fbx");
useFBX.preload("/animations/sitting-clap.fbx");
useFBX.preload("/animations/sitting-clap_1.fbx");
useFBX.preload("/animations/sitting-talking.fbx");
useFBX.preload("/animations/Sitting-Laughing.fbx");


